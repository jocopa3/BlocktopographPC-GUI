/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jocopa3.blocktopographpc.gui.panels;

import com.jocopa3.blocktopographpc.gui.nbt.NBTIcon;
import com.jocopa3.blocktopographpc.gui.windows.WorldWindow;
import com.protolambda.blocktopograph.nbt.EditableNBT;
import com.protolambda.blocktopograph.util.io.ImageUtil;
import com.protolambda.blocktopograph.world.World;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.LayoutStyle;
import javax.swing.ScrollPaneConstants;

/**
 *
 * @author Matt
 */
public class WorldWindowSideBar extends javax.swing.JPanel {

    private WorldWindow parentWindow;

    public WorldWindowSideBar() {
        initComponents();
    }

    /**
     * Creates new form WorldWindowSideBar
     *
     * @param parentWindow
     */
    public WorldWindowSideBar(WorldWindow parentWindow) {
        initComponents();

        this.parentWindow = parentWindow;
    }

    public void setParentWindow(WorldWindow parent) {
        parentWindow = parent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionScrollPane = new JScrollPane();
        scrollPanel = new JPanel();
        openPlayerNBT = new JButton();
        openMultiplayerNBT = new JButton();
        openWorldNBT = new JButton();
        jSeparator2 = new JSeparator();
        openOverworldNBT = new JButton();
        openNetherNBT = new JButton();
        openEndNBT = new JButton();
        openVillagesNBT = new JButton();
        openPortalsNBT = new JButton();
        openDimension0NBT = new JButton();
        openDimension1NBT = new JButton();
        openDimension2NBT = new JButton();
        openAutonomousEntitiesNBT = new JButton();
        openBiomeDataNBT = new JButton();

        setBackground(new Color(255, 255, 255));

        optionScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        optionScrollPane.setHorizontalScrollBar(null);

        openPlayerNBT.setText("Singleplayer NBT");
        openPlayerNBT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openPlayerNBTActionPerformed(evt);
            }
        });

        openMultiplayerNBT.setText("Multiplayer NBT");
        openMultiplayerNBT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openMultiplayerNBTActionPerformed(evt);
            }
        });

        openWorldNBT.setText("World NBT");
        openWorldNBT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openWorldNBTActionPerformed(evt);
            }
        });

        openOverworldNBT.setText("Overworld NBT");
        openOverworldNBT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openOverworldNBTActionPerformed(evt);
            }
        });

        openNetherNBT.setText("Nether NBT");
        openNetherNBT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openNetherNBTActionPerformed(evt);
            }
        });

        openEndNBT.setText("End NBT");
        openEndNBT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openEndNBTActionPerformed(evt);
            }
        });

        openVillagesNBT.setText("Villages NBT");
        openVillagesNBT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openVillagesNBTActionPerformed(evt);
            }
        });

        openPortalsNBT.setText("Portals NBT");
        openPortalsNBT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openPortalsNBTActionPerformed(evt);
            }
        });

        openDimension0NBT.setText("dimension0 NBT");
        openDimension0NBT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openDimension0NBTActionPerformed(evt);
            }
        });

        openDimension1NBT.setText("dimension1 NBT");
        openDimension1NBT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openDimension1NBTActionPerformed(evt);
            }
        });

        openDimension2NBT.setText("dimension2 NBT");
        openDimension2NBT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openDimension2NBTActionPerformed(evt);
            }
        });

        openAutonomousEntitiesNBT.setText("AutonomousEntities NBT");
        openAutonomousEntitiesNBT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openAutonomousEntitiesNBTActionPerformed(evt);
            }
        });

        openBiomeDataNBT.setText("BiomeData NBT");
        openBiomeDataNBT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openBiomeDataNBTActionPerformed(evt);
            }
        });

        GroupLayout scrollPanelLayout = new GroupLayout(scrollPanel);
        scrollPanel.setLayout(scrollPanelLayout);
        scrollPanelLayout.setHorizontalGroup(scrollPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(scrollPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scrollPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(openOverworldNBT, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openPlayerNBT, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openMultiplayerNBT, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openWorldNBT, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openNetherNBT, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openEndNBT, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openVillagesNBT, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openPortalsNBT, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openDimension0NBT, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openDimension1NBT, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openDimension2NBT, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openAutonomousEntitiesNBT, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openBiomeDataNBT, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        scrollPanelLayout.setVerticalGroup(scrollPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(scrollPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(openPlayerNBT)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openMultiplayerNBT)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openWorldNBT)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openOverworldNBT)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openNetherNBT)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openEndNBT)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openBiomeDataNBT)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openVillagesNBT)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openPortalsNBT)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openDimension0NBT)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openDimension1NBT)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openDimension2NBT)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openAutonomousEntitiesNBT)
                .addContainerGap(182, Short.MAX_VALUE))
        );

        optionScrollPane.setViewportView(scrollPanel);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(optionScrollPane)
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(optionScrollPane)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openPlayerNBTActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openPlayerNBTActionPerformed
        EditableNBT playerNBT = null;
        try {
            playerNBT = parentWindow.provider.getEditablePlayer();
        } catch (Exception ex) {
            return;
        }

        if (playerNBT == null) {
            JOptionPane.showMessageDialog(parentWindow, "No NBT data found for " + World.SpecialDBEntryType.LOCAL_PLAYER.keyName, "No NBT Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        parentWindow.addTab(new NBTPanel(parentWindow, playerNBT), NBTIcon.COMPOUND.icon);
    }//GEN-LAST:event_openPlayerNBTActionPerformed

    private void openMultiplayerNBTActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openMultiplayerNBTActionPerformed
        EditableNBT playerNBT = null;
        try {
            playerNBT = parentWindow.provider.openEditableNbtLevel(null);
        } catch (Exception ex) {
            return;
        }

        if (playerNBT == null) {
            JOptionPane.showMessageDialog(parentWindow, "No NBT data found for level.dat", "No NBT Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        parentWindow.addTab(new NBTPanel(parentWindow, playerNBT), NBTIcon.COMPOUND.icon);
    }//GEN-LAST:event_openMultiplayerNBTActionPerformed

    private void openWorldNBTActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openWorldNBTActionPerformed
        EditableNBT worldNBT = null;
        try {
            worldNBT = parentWindow.provider.openEditableNbtLevel(null);
        } catch (Exception ex) {
            return;
        }

        if (worldNBT == null) {
            JOptionPane.showMessageDialog(parentWindow, "No NBT data found for level.dat", "No NBT Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        parentWindow.addTab(new NBTPanel(parentWindow, worldNBT), NBTIcon.COMPOUND.icon);
    }//GEN-LAST:event_openWorldNBTActionPerformed

    private void openNetherNBTActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openNetherNBTActionPerformed
        EditableNBT nbtData = null;
        try {
            nbtData = parentWindow.provider.openSpecialEditableNbtDbEntry(World.SpecialDBEntryType.NETHER);
        } catch (Exception ex) {
            return;
        }

        if (nbtData == null) {
            JOptionPane.showMessageDialog(parentWindow, "No NBT data found for " + World.SpecialDBEntryType.NETHER.keyName, "No NBT Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        parentWindow.addTab(new NBTPanel(parentWindow, nbtData), NBTIcon.COMPOUND.icon);
    }//GEN-LAST:event_openNetherNBTActionPerformed

    private void openOverworldNBTActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openOverworldNBTActionPerformed
        EditableNBT nbtData = null;
        try {
            nbtData = parentWindow.provider.openSpecialEditableNbtDbEntry(World.SpecialDBEntryType.OVERWORLD);
        } catch (Exception ex) {
            return;
        }

        if (nbtData == null) {
            JOptionPane.showMessageDialog(parentWindow, "No NBT data found for " + World.SpecialDBEntryType.OVERWORLD.keyName, "No NBT Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        parentWindow.addTab(new NBTPanel(parentWindow, nbtData), NBTIcon.COMPOUND.icon);
    }//GEN-LAST:event_openOverworldNBTActionPerformed

    private void openEndNBTActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openEndNBTActionPerformed
        EditableNBT nbtData = null;
        try {
            nbtData = parentWindow.provider.openSpecialEditableNbtDbEntry(World.SpecialDBEntryType.THEEND);
        } catch (Exception ex) {
            return;
        }

        if (nbtData == null) {
            JOptionPane.showMessageDialog(parentWindow, "No NBT data found for " + World.SpecialDBEntryType.THEEND.keyName, "No NBT Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        parentWindow.addTab(new NBTPanel(parentWindow, nbtData), NBTIcon.COMPOUND.icon);
    }//GEN-LAST:event_openEndNBTActionPerformed

    private void openVillagesNBTActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openVillagesNBTActionPerformed
        EditableNBT nbtData = null;
        try {
            nbtData = parentWindow.provider.openSpecialEditableNbtDbEntry(World.SpecialDBEntryType.M_VILLAGES);
        } catch (Exception ex) {
            return;
        }

        if (nbtData == null) {
            JOptionPane.showMessageDialog(parentWindow, "No NBT data found for " + World.SpecialDBEntryType.M_VILLAGES.keyName, "No NBT Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        parentWindow.addTab(new NBTPanel(parentWindow, nbtData), NBTIcon.COMPOUND.icon);
    }//GEN-LAST:event_openVillagesNBTActionPerformed

    private void openPortalsNBTActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openPortalsNBTActionPerformed
        EditableNBT nbtData = null;
        try {
            nbtData = parentWindow.provider.openSpecialEditableNbtDbEntry(World.SpecialDBEntryType.PORTALS);
        } catch (Exception ex) {
            return;
        }

        if (nbtData == null) {
            JOptionPane.showMessageDialog(parentWindow, "No NBT data found for " + World.SpecialDBEntryType.PORTALS.keyName, "No NBT Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        parentWindow.addTab(new NBTPanel(parentWindow, nbtData), NBTIcon.COMPOUND.icon);
    }//GEN-LAST:event_openPortalsNBTActionPerformed

    private void openDimension0NBTActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openDimension0NBTActionPerformed
        EditableNBT nbtData = null;
        try {
            nbtData = parentWindow.provider.openSpecialEditableNbtDbEntry(World.SpecialDBEntryType.DIMENSION_0);
        } catch (Exception ex) {
            return;
        }

        if (nbtData == null) {
            JOptionPane.showMessageDialog(parentWindow, "No NBT data found for " + World.SpecialDBEntryType.DIMENSION_0.keyName, "No NBT Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        parentWindow.addTab(new NBTPanel(parentWindow, nbtData), NBTIcon.COMPOUND.icon);
    }//GEN-LAST:event_openDimension0NBTActionPerformed

    private void openDimension1NBTActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openDimension1NBTActionPerformed
        EditableNBT nbtData = null;
        try {
            nbtData = parentWindow.provider.openSpecialEditableNbtDbEntry(World.SpecialDBEntryType.DIMENSION_1);
        } catch (Exception ex) {
            return;
        }

        if (nbtData == null) {
            JOptionPane.showMessageDialog(parentWindow, "No NBT data found for " + World.SpecialDBEntryType.DIMENSION_1.keyName, "No NBT Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        parentWindow.addTab(new NBTPanel(parentWindow, nbtData), NBTIcon.COMPOUND.icon);
    }//GEN-LAST:event_openDimension1NBTActionPerformed

    private void openDimension2NBTActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openDimension2NBTActionPerformed
        EditableNBT nbtData = null;
        try {
            nbtData = parentWindow.provider.openSpecialEditableNbtDbEntry(World.SpecialDBEntryType.DIMENSION_2);
        } catch (Exception ex) {
            return;
        }

        if (nbtData == null) {
            JOptionPane.showMessageDialog(parentWindow, "No NBT data found for " + World.SpecialDBEntryType.DIMENSION_2.keyName, "No NBT Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        parentWindow.addTab(new NBTPanel(parentWindow, nbtData), NBTIcon.COMPOUND.icon);
    }//GEN-LAST:event_openDimension2NBTActionPerformed

    private void openAutonomousEntitiesNBTActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openAutonomousEntitiesNBTActionPerformed
        EditableNBT nbtData = null;
        try {
            nbtData = parentWindow.provider.openSpecialEditableNbtDbEntry(World.SpecialDBEntryType.AUTONOMOUS_ENTITIES);
        } catch (Exception ex) {
            return;
        }

        if (nbtData == null) {
            JOptionPane.showMessageDialog(parentWindow, "No NBT data found for " + World.SpecialDBEntryType.AUTONOMOUS_ENTITIES.keyName, "No NBT Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        parentWindow.addTab(new NBTPanel(parentWindow, nbtData), NBTIcon.COMPOUND.icon);
    }//GEN-LAST:event_openAutonomousEntitiesNBTActionPerformed

    private void openBiomeDataNBTActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openBiomeDataNBTActionPerformed
        EditableNBT nbtData = null;
        try {
            nbtData = parentWindow.provider.openSpecialEditableNbtDbEntry(World.SpecialDBEntryType.BIOME_DATA);
        } catch (Exception ex) {
            return;
        }

        if (nbtData == null) {
            JOptionPane.showMessageDialog(parentWindow, "No NBT data found for " + World.SpecialDBEntryType.BIOME_DATA.keyName, "No NBT Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        parentWindow.addTab(new NBTPanel(parentWindow, nbtData), NBTIcon.COMPOUND.icon);
    }//GEN-LAST:event_openBiomeDataNBTActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JSeparator jSeparator2;
    private JButton openAutonomousEntitiesNBT;
    private JButton openBiomeDataNBT;
    private JButton openDimension0NBT;
    private JButton openDimension1NBT;
    private JButton openDimension2NBT;
    private JButton openEndNBT;
    private JButton openMultiplayerNBT;
    private JButton openNetherNBT;
    private JButton openOverworldNBT;
    private JButton openPlayerNBT;
    private JButton openPortalsNBT;
    private JButton openVillagesNBT;
    private JButton openWorldNBT;
    private JScrollPane optionScrollPane;
    private JPanel scrollPanel;
    // End of variables declaration//GEN-END:variables
}
