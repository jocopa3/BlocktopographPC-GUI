/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jocopa3.blocktopographpc.gui.windows;

import com.jocopa3.blocktopographpc.gui.CleanableComponent;
import com.jocopa3.blocktopographpc.gui.Main;
import com.jocopa3.blocktopographpc.gui.panels.WorldWindowSideBar;
import com.protolambda.blocktopograph.util.io.ImageUtil;
import com.protolambda.blocktopograph.world.World;
import com.protolambda.blocktopograph.world.WorldData;
import com.protolambda.blocktopograph.world.WorldProvider;
import java.awt.Component;
import java.awt.FontMetrics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

/**
 *
 * @author Matt
 */
public class WorldWindow extends JFrame implements CleanableComponent {

    private final World world;
    private final WorldProvider provider;
    private boolean worldLoaded = false;

    public final String keyName;

    /**
     * Creates new form MainWindow
     */
    public WorldWindow(World world) {
        initComponents();

        List<BufferedImage> list = new ArrayList<>();
        list.add(ImageUtil.readImage("program_icons/icon512.png"));
        list.add(ImageUtil.readImage("program_icons/icon256.png"));
        list.add(ImageUtil.readImage("program_icons/icon128.png"));
        list.add(ImageUtil.readImage("program_icons/icon64.png"));
        list.add(ImageUtil.readImage("program_icons/icon32.png"));

        setIconImages(list);
        setVisible(true);

        this.world = world;
        provider = new WorldProvider(world);

        keyName = world.worldName + System.nanoTime();

        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                if (JOptionPane.showConfirmDialog(windowEvent.getWindow(),
                        "Are you sure to close this window?", "Close World?",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                    //WorldSelectWindow.mainWindow.setVisible(true);

                    Main.OpenWindows.remove(keyName);

                    cleanUp();
                    dispose();
                }
            }
        });
    }
    
    public boolean loadWorld() {
        if (worldLoaded) {
            return true;
        }

        try {
            world.getWorldData().load();
            worldLoaded = true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Cannot open the world!\n\nError Message:\n\n" + e.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();

            cleanUp();
            dispose();

            worldLoaded = false;
        }
        
        //world.logDBKeys();
        return worldLoaded;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        tabPane = new javax.swing.JTabbedPane();
        worldWindowSideBar = new com.jocopa3.blocktopographpc.gui.panels.WorldWindowSideBar();
        worldWindowSideBar.setParentWindow(this);
        footerBar = new com.jocopa3.blocktopographpc.gui.panels.WorldWindowFooterBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        splitPane.setRightComponent(tabPane);
        splitPane.setLeftComponent(worldWindowSideBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE)
            .addComponent(footerBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(footerBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void addTab(JPanel newTab) {
        tabPane.add(newTab);
    }

    public void addTab(JPanel newTab, ImageIcon icon) {
        addTab(newTab);

        JLabel tabLabel = new JLabel(newTab.getName());

        // Find out how much to scale the icon by
        FontMetrics metrics = getGraphics().getFontMetrics(tabLabel.getFont());
        int height = metrics.getHeight();
        float scaleRatio = ((float) height) / ((float) icon.getIconHeight());

        Image image = icon.getImage();
        Image scaledImage = image.getScaledInstance(Math.round(icon.getIconWidth() * scaleRatio), height, java.awt.Image.SCALE_SMOOTH);
        tabLabel.setIcon(new ImageIcon(scaledImage));

        tabLabel.setIconTextGap(5);
        tabLabel.setHorizontalTextPosition(SwingConstants.RIGHT);

        tabPane.setTabComponentAt(tabPane.getTabCount() - 1, tabLabel);
    }
    
    public void removeTab(JPanel tab) {
        tabPane.remove(tab);
    }

    public World getWorld() {
        return world;
    }
    
    public WorldProvider getWorldProvider() {
        return provider;
    }

    @Override
    public boolean cleanUp() {
        System.out.println("Cleaning " + this.world.worldName);
        boolean fullyCleaned = true;
        int tabCount = tabPane.getTabCount();
        for (int i = 0; i < tabCount; i++) {
            Component c = tabPane.getComponentAt(i);

            if (c instanceof CleanableComponent) {
                fullyCleaned &= ((CleanableComponent) c).cleanUp();
            }
        }

        try {
            world.closeDown();
        } catch (WorldData.WorldDBException ex) {
            // Oh boy... this is really really bad...
            ex.printStackTrace();
        }
        
        return fullyCleaned;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public com.jocopa3.blocktopographpc.gui.panels.WorldWindowFooterBar footerBar;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTabbedPane tabPane;
    private com.jocopa3.blocktopographpc.gui.panels.WorldWindowSideBar worldWindowSideBar;
    // End of variables declaration//GEN-END:variables

}
