/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jocopa3.blocktopographpc.gui.windows;

import com.jocopa3.blocktopographpc.gui.Main;
import com.jocopa3.blocktopographpc.gui.panels.MapPanel;
import com.jocopa3.blocktopographpc.options.OptionEnum;
import com.protolambda.blocktopograph.util.io.ImageUtil;
import com.protolambda.blocktopograph.world.World;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Matt
 */
public class WorldSelectWindow extends javax.swing.JFrame {

    public static final WorldSelectWindow MainWindow = new WorldSelectWindow();

    /**
     * Creates new form WorldSelectWindow
     */
    public WorldSelectWindow() {
        initComponents();

        List<BufferedImage> list = new ArrayList<>();
        list.add(ImageUtil.readImage("program_icons/icon512.png"));
        list.add(ImageUtil.readImage("program_icons/icon256.png"));
        list.add(ImageUtil.readImage("program_icons/icon128.png"));
        list.add(ImageUtil.readImage("program_icons/icon64.png"));
        list.add(ImageUtil.readImage("program_icons/icon32.png"));

        setIconImages(list);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        worldListPanel = new com.jocopa3.blocktopographpc.gui.panels.WorldListPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openWorldMenuItem = new javax.swing.JMenuItem();
        selectWorldFolderMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(380, 3840));
        setMinimumSize(new java.awt.Dimension(325, 540));

        worldListPanel.reloadWorldList();

        jMenuBar1.setBorder(null);

        fileMenu.setText("File");

        openWorldMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openWorldMenuItem.setText("Open World");
        openWorldMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openWorldMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openWorldMenuItem);

        selectWorldFolderMenuItem.setText("Select World Folder");
        selectWorldFolderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectWorldFolderMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(selectWorldFolderMenuItem);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(worldListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(worldListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openWorldMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openWorldMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        chooser.setDialogTitle("Select World");
        
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                }
                
                final String name = f.getName();
                return name.toLowerCase().equals("level.dat");
            }

            @Override
            public String getDescription() {
                return "level.dat";
            }
        });
        
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                openNewWorldWindow(new World(chooser.getSelectedFile().getParentFile()));
            } catch (World.WorldLoadException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_openWorldMenuItemActionPerformed

    private void selectWorldFolderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectWorldFolderMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(Main.Options.get(OptionEnum.WORLD_FOLDER.getKeyName())));
        chooser.setDialogTitle("Select World Folder");
        
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
        chooser.setAcceptAllFileFilterUsed(false);
        
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Main.Options.set(OptionEnum.WORLD_FOLDER.getKeyName(), chooser.getSelectedFile().getPath());
            worldListPanel.reloadWorldList();
        }
    }//GEN-LAST:event_selectWorldFolderMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        AboutWindow.showWindow();
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    @Override
    public void setVisible(boolean visible) {
        super.setVisible(visible);

        //if (visible) {
        //    worldListPanel.reloadWorldList();
        //}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem openWorldMenuItem;
    private javax.swing.JMenuItem selectWorldFolderMenuItem;
    private com.jocopa3.blocktopographpc.gui.panels.WorldListPanel worldListPanel;
    // End of variables declaration//GEN-END:variables

    public void openNewWorldWindow(World world) {
        WorldWindow mw = new WorldWindow(world);

        mw.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        mw.setTitle("World: " + mw.getWorld().getWorldDisplayName());

        if (!mw.loadWorld()) {
            return;
        }

        mw.addTab(new MapPanel(mw.getWorld(), mw.getWorldProvider()), new ImageIcon(ImageUtil.readImage("world_icon.png")));

        mw.pack();
        mw.setLocationRelativeTo(null);

        mw.setVisible(true);

        Main.OpenWindows.put(mw.keyName, mw);
    }

}
