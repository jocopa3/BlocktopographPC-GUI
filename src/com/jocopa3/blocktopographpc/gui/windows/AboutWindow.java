/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jocopa3.blocktopographpc.gui.windows;

import com.jocopa3.blocktopographpc.gui.CleanableComponent;
import com.jocopa3.blocktopographpc.gui.Main;
import static com.jocopa3.blocktopographpc.gui.Main.OpenWindows;
import static com.jocopa3.blocktopographpc.gui.Main.Options;
import static com.jocopa3.blocktopographpc.gui.windows.WorldSelectWindow.MainWindow;
import com.protolambda.blocktopograph.util.io.ImageUtil;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.image.BufferedImage;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.LayoutStyle;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;

/**
 *
 * @author Matt
 */
public class AboutWindow extends javax.swing.JFrame {

    private static final AboutWindow SingletonInstance = new AboutWindow();

    /**
     * Creates new form AboutWindow
     */
    private AboutWindow() {
        initComponents();

        List<BufferedImage> list = new ArrayList<>();
        list.add(ImageUtil.readImage("program_icons/icon512.png"));
        list.add(ImageUtil.readImage("program_icons/icon256.png"));
        list.add(ImageUtil.readImage("program_icons/icon128.png"));
        list.add(ImageUtil.readImage("program_icons/icon64.png"));
        list.add(ImageUtil.readImage("program_icons/icon32.png"));

        setVisible(false);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                hideWindow();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new JPanel();
        aboutLabel = new JLabel();
        iconLabel = new JLabel();
        librariesScrollPane = new JScrollPane();
        librariesEditorPane = new JEditorPane();
        aboutScrollPane = new JScrollPane();
        aboutEditorPane = new JEditorPane();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        setForeground(Color.lightGray);

        mainPanel.setBackground(new Color(255, 255, 255));

        aboutLabel.setFont(aboutLabel.getFont().deriveFont(aboutLabel.getFont().getStyle() | Font.BOLD, aboutLabel.getFont().getSize()+13));
        aboutLabel.setText("About");

        iconLabel.setIcon(new ImageIcon(getClass().getResource("/assets/program_icons/icon256.png"))); // NOI18N

        librariesScrollPane.setBackground(mainPanel.getBackground()
        );
        librariesScrollPane.setBorder(BorderFactory.createEtchedBorder());

        librariesEditorPane.setEditable(false);
        librariesEditorPane.setBackground(mainPanel.getBackground()
        );
        librariesEditorPane.setBorder(null);
        librariesEditorPane.setContentType("text/html"); // NOI18N
        librariesEditorPane.setText("<html>\r\n  <head>\r\n\r    <style>\n      a {\n        color: #0060A0;\n        text-decoration: none;\n        cursor: pointer;\n      }\n\n      ul {\n        margin: 0;\n        padding-left: 15px;\n      }\n    </style>\n  </head>\r\n  <body>\r\n    <p style=\"margin-top: 0;\">\r\n      Libraries used:\n      <ul>\n        <li><a href=\"https://github.com/protolambda/blocktopograph-lib\">Blocktopograph-Lib</a></li>\n        <li><a href=\"https://github.com/java-native-access/jna\">Java Native Access</a></li>\n        <li><a href=\"https://github.com/ben-manes/concurrentlinkedhashmap\">Java ConcurrentLinkedHashmap</a></li>\n        <li><a href=\"https://github.com/protonail/leveldb-jna\">LevelDB JNA</a> with <a href=\"https://github.com/Mojang/leveldb-mcpe\">LevelDB-MCPE</a></li>\n        <li><a href=\"https://github.com/msteiger/jxmapviewer2\">JXMapViewer2</a></li>\n      </ul>\n    </p>\r\n    <p>\n      Licenses for each library can be found in the \"Licenses\" folder included with this program.\n    </p>\n  </body>\r\n</html>\r\n");
        librariesEditorPane.addHyperlinkListener(new HyperlinkListener() {
            public void hyperlinkUpdate(HyperlinkEvent evt) {
                librariesEditorPaneHyperlinkUpdate(evt);
            }
        });
        librariesScrollPane.setViewportView(librariesEditorPane);

        aboutScrollPane.setBackground(mainPanel.getBackground()
        );
        aboutScrollPane.setBorder(BorderFactory.createEtchedBorder());

        aboutEditorPane.setEditable(false);
        aboutEditorPane.setBackground(mainPanel.getBackground()
        );
        aboutEditorPane.setBorder(null);
        aboutEditorPane.setContentType("text/html"); // NOI18N
        aboutEditorPane.setText("<html>\n  <head>\n    <style>\n      a {\n        color: #0060A0;\n        text-decoration: none;\n        cursor: pointer;\n      }\n\n      ul {\n        margin: 0;\n        padding-left: 15px;\n      }\n    </style>\n  </head>\n  <body>\n    <p style=\"margin-top: 0;\">\n      Blocktopograph-PC is a PC adaptation of <a href=\"http://blocktopograph.protolambda.com/\">Blocktopograph</a> by <a href=\"https://twitter.com/jocopa3\">@jocopa3</a>\n    </p><p>\n      The original Blocktopograph app was written by <a href=\"https://twitter.com/protolambda\">@protolambda</a>\n    </p><p>\n      This program has been tested with worlds made by MCPE 0.14.x and newer. Worlds made by older versions of the game may not work or aren't supported.\n    </p><p>\n      Please backup worlds before opening them with this program!\n    </p>\n    <p><b>Disclaimer:</b></p>\n    <p>\n      Blocktopograph and Blocktopograph-PC are <i>not</i> official apps, and are <i>not</i> affiliated with Mojang AB or Microsoft. Minecraft is a trademark of Mojang AB.\n    </p>\n    <p><b>Note:</b></p>\n    <p>\n      THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND.\n    </p>\n  </body>\n</html>\n");
        aboutEditorPane.addHyperlinkListener(new HyperlinkListener() {
            public void hyperlinkUpdate(HyperlinkEvent evt) {
                aboutEditorPaneHyperlinkUpdate(evt);
            }
        });
        aboutScrollPane.setViewportView(aboutEditorPane);

        GroupLayout mainPanelLayout = new GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(librariesScrollPane, GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(aboutLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(aboutScrollPane, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iconLabel)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(iconLabel)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(aboutLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aboutScrollPane, GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(librariesScrollPane, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(mainPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void librariesEditorPaneHyperlinkUpdate(HyperlinkEvent evt) {//GEN-FIRST:event_librariesEditorPaneHyperlinkUpdate
        if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().browse(evt.getURL().toURI());
                } catch (Exception ex) {
                    // Ignore
                }
            }
        }
    }//GEN-LAST:event_librariesEditorPaneHyperlinkUpdate

    private void aboutEditorPaneHyperlinkUpdate(HyperlinkEvent evt) {//GEN-FIRST:event_aboutEditorPaneHyperlinkUpdate
        if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().browse(evt.getURL().toURI());
                } catch (Exception ex) {
                    // Ignore
                }
            }
        }
    }//GEN-LAST:event_aboutEditorPaneHyperlinkUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AboutWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AboutWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AboutWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AboutWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AboutWindow().setVisible(true);
            }
        });
    }

    public static void showWindow() {
        SingletonInstance.setVisible(true);
    }

    public static void hideWindow() {
        SingletonInstance.setVisible(false);
    }

    public static void disposeWindow() {
        SingletonInstance.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JEditorPane aboutEditorPane;
    private JLabel aboutLabel;
    private JScrollPane aboutScrollPane;
    private JLabel iconLabel;
    private JEditorPane librariesEditorPane;
    private JScrollPane librariesScrollPane;
    private JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
}
